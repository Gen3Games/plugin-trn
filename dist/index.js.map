{"version":3,"sources":["../src/actions/get-balance.ts","../src/utils/assets.ts","../src/examples/get-balance.ts","../src/templates/index.ts","../src/utils/trn.ts","../src/index.ts"],"sourcesContent":["import {\n  composeContext,\n  elizaLogger,\n  generateObjectDeprecated,\n  type HandlerCallback,\n  ModelClass,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n} from '@elizaos/core';\n\nimport { getAssetBySymbol } from '../utils/assets';\nimport { getTrnBalanceExamples } from '../examples/get-balance';\nimport { getTrnBalanceTemplate } from '../templates';\nimport { getApi } from '../utils/trn';\nimport { ApiPromise } from '@polkadot/api';\nimport { AccountAssetDetails, BalanceContent, FrameSystemAccountInfo } from '../types';\n\nfunction isBalanceContent(runtime: IAgentRuntime, content: any): content is BalanceContent {\n  elizaLogger.log('Content for balance', content);\n  return (\n    typeof content.address === 'string' && (typeof content.token === 'string' || typeof content.token === 'number')\n  );\n}\n\nexport const getBalanceAction = {\n  name: 'getBalance',\n  description: 'Get balance of a TRN asset for the given address',\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: Record<string, unknown>,\n    callback?: HandlerCallback\n  ) => {\n    elizaLogger.log('Starting getBalance action...');\n\n    let currentState = state;\n    if (!currentState) {\n      currentState = (await runtime.composeState(message)) as State;\n    } else {\n      currentState = await runtime.updateRecentMessageState(currentState);\n    }\n    const network = process.env.PUBLIC_NETWORK_SET === 'mainnet' ? 'mainnet' : 'testnet';\n\n    const getBalanceContext = composeContext({\n      state: currentState,\n      template: getTrnBalanceTemplate,\n    });\n\n    const content = await generateObjectDeprecated({\n      runtime,\n      context: getBalanceContext,\n      modelClass: ModelClass.LARGE,\n    });\n\n    if (!isBalanceContent(runtime, content)) {\n      if (callback) {\n        callback({\n          text: 'Address and token needed to get the balance.',\n          content: { error: 'Invalid balance content' },\n        });\n      }\n      return false;\n    }\n\n    const token = content.token!;\n    const address = content.address!;\n\n    try {\n      const assetId = typeof token === 'string' ? await getAssetBySymbol(token, network) : token;\n      if (!assetId) {\n        const errorMsg = `Token '${token}' is not recognized on ${network}`;\n        elizaLogger.error(errorMsg);\n        callback?.({ text: errorMsg, content: { token, error: errorMsg } });\n        return false;\n      }\n      const trnApi = await getApi(network);\n      const api = trnApi as ApiPromise;\n\n      let rawBalance: bigint;\n      if (assetId === 1) {\n        const accountInfo = (await api.query.system.account(address)) as unknown as FrameSystemAccountInfo | null;\n        if (!accountInfo) {\n          throw new Error(`No account info found for ${address}`);\n        }\n\n        const bigIntFree = accountInfo?.data?.free || 0n;\n        const bigIntMiscFrozen = accountInfo?.data?.miscFrozen || 0n;\n\n        const bigIntBalance = BigInt(bigIntFree - bigIntMiscFrozen);\n        rawBalance = bigIntBalance;\n      } else {\n        const result = (\n          await trnApi.query.assets.account(assetId, address)\n        ).toPrimitive() as unknown as unknown as AccountAssetDetails | null;\n        if (!result) {\n          throw new Error(`No balance found for ${token} on TRN`);\n        }\n        rawBalance = BigInt(result.balance);\n      }\n\n      callback?.({\n        text: `${address} has ${rawBalance} ${token} on TRN.`,\n        content: { address, token, balance: rawBalance.toString() },\n      });\n\n      return true;\n    } catch (err) {\n      const errorMessage = `Error getting balance for ${token} on TRN: ${err.message}`;\n      elizaLogger.error(errorMessage);\n      callback?.({\n        text: errorMessage,\n        content: {\n          error: err.message,\n          token,\n        },\n      });\n      return false;\n    }\n  },\n  template: getTrnBalanceTemplate,\n  validate: async (_runtime: IAgentRuntime, message: Memory) => {\n    // Always return true for token transfers, letting the handler deal with specifics\n    elizaLogger.log('Validating get balance from user:', message.userId);\n    return true;\n  },\n  examples: getTrnBalanceExamples,\n  similes: ['GET_BALANCE', 'CHECK_BALANCE'],\n};\n","const assetLists = {\n  mainnet: [\n    { id: 1, symbol: 'ROOT', decimals: 6 },\n    { id: 2, symbol: 'XRP', decimals: 6 },\n    { id: 121956, symbol: 'ZRP', decimals: 8 },\n    { id: 4196, symbol: 'ASTO', decimals: 18 },\n    { id: 2148, symbol: 'SYLO', decimals: 18 },\n    { id: 6244, symbol: 'USDT', decimals: 6 },\n    { id: 98404, symbol: '$30MM', decimals: 6 },\n    { id: 142436, symbol: 'DCC', decimals: 6 },\n    { id: 128100, symbol: 'STONE', decimals: 6 },\n    { id: 129124, symbol: 'ALLOY', decimals: 6 },\n    { id: 130148, symbol: 'GOLD', decimals: 6 },\n    { id: 131172, symbol: 'OOZE', decimals: 6 },\n    { id: 132196, symbol: 'GEMS', decimals: 6 },\n    { id: 3, symbol: 'VTX', decimals: 6 },\n    { id: 3172, symbol: 'USDC', decimals: 6 },\n    { id: 1124, symbol: 'ETH', decimals: 18 },\n    { id: 201828, symbol: 'ZMC', decimals: 0 },\n  ],\n  testnet: [\n    { id: 1, symbol: 'ROOT', decimals: 6 },\n    { id: 2, symbol: 'XRP', decimals: 6 },\n    { id: 205924, symbol: 'ZRP', decimals: 8 },\n    { id: 17508, symbol: 'ASTO', decimals: 18 },\n    { id: 3172, symbol: 'SYLO', decimals: 18 },\n    { id: 2148, symbol: 'SepoliaUSDC', decimals: 6 },\n    { id: 218212, symbol: 'GOLD', decimals: 6 },\n  ],\n};\n\nexport function getAssetBySymbol(symbol: string, network: 'mainnet' | 'testnet'): number | null {\n  const list = assetLists[network];\n  return list.find((asset) => asset.symbol.toLowerCase() === symbol.toLowerCase())?.id ?? null;\n}\n","import { ActionExample } from '@elizaos/core';\n\nexport const getTrnBalanceExamples: ActionExample[][] = [\n  [\n    {\n      user: '{{user1}}',\n      content: {\n        text: 'Check my balance of ROOT',\n      },\n    },\n    {\n      user: '{{agent}}',\n      content: {\n        text: \"I'll help you check your balance of ROOT\",\n        action: 'GET_BALANCE',\n        content: {\n          address: '{{walletAddress}}',\n          token: 'ROOT',\n        },\n      },\n    },\n  ],\n  [\n    {\n      user: '{{user1}}',\n      content: {\n        text: 'Check my balance of asset id 208120',\n      },\n    },\n    {\n      user: '{{agent}}',\n      content: {\n        text: \"I'll help you check your balance of asset id 208120\",\n        action: 'GET_BALANCE',\n        content: {\n          address: '{{walletAddress}}',\n          token: '208120',\n        },\n      },\n    },\n  ],\n  [\n    {\n      user: '{{user1}}',\n      content: {\n        text: 'Get ROOT balance of 0x1234',\n      },\n    },\n    {\n      user: '{{agent}}',\n      content: {\n        text: \"I'll help you check ROOT balance of 0x1234\",\n        action: 'GET_BALANCE',\n        content: {\n          address: '0x1234',\n          token: 'ROOT',\n        },\n      },\n    },\n  ],\n  [\n    {\n      user: '{{user1}}',\n      content: {\n        text: 'Check balance of 0x1234 with asset id 208120',\n      },\n    },\n    {\n      user: '{{agent}}',\n      content: {\n        text: \"I'll help you check ROOT balance of 0x1234\",\n        action: 'GET_BALANCE',\n        content: {\n          address: '0x1234',\n          token: '208120',\n        },\n      },\n    },\n  ],\n];\n","export const getTrnBalanceTemplate = `\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following details:\n- Wallet address to check. Optional. If not given, use the default TRN wallet.\n- Token symbol or asset id. Default is \"ROOT\".\n\nReturn a JSON object like:\n\n\\`\\`\\`json\n{\n  \"address\": string | null,\n  \"token\": string | number | null \n}\n\\`\\`\\`\n`;\n\nexport const trnTransferTemplate = `\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following details:\n- Token symbol or asset id. Optional.\n- Amount to transfer (as a string, e.g., \"0.1\").\n- Recipient address (TRN address).\n\nReturn a JSON object like:\n\n\\`\\`\\`json\n{\n  \"token\": string | number | null,\n  \"amount\": string | null,\n  \"toAddress\": string | null,\n}\n\\`\\`\\`\n`;\n\nexport const trnSwapTemplate = `\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following details:\n- Input token (symbol or asset id).\n- Output token (symbol or asset id).\n- Amount to swap (as string).\n\nReturn a JSON object like:\n\n\\`\\`\\`json\n{\n  \"inputToken\": string | number,\n  \"outputToken\": string | number,\n  \"amount\": string,  \n}\n\\`\\`\\`\n`;\n","import { ApiPromise } from '@polkadot/api';\nimport { getApiOptions, getPublicProvider } from '@therootnetwork/api';\nimport { formatUnits } from 'ethers';\nimport { AssetBuilder, BatchBuilder, CustomExtrinsicBuilder } from '@futureverse/transact';\nimport { AccountAssetDetails, FrameSystemAccountInfo } from '../types';\n\nexport async function getApi(networkSet?: 'mainnet' | 'testnet'): Promise<ApiPromise> {\n  if (!networkSet) networkSet = process.env.NEXT_PUBLIC_NETWORK_SET as 'mainnet' | 'testnet';\n  const trnApi =\n    networkSet === 'mainnet'\n      ? await ApiPromise.create({\n          ...getApiOptions(),\n          ...getPublicProvider('root'),\n        })\n      : await ApiPromise.create({\n          ...getApiOptions(),\n          ...getPublicProvider('porcini'),\n        });\n  trnApi.on('connected', () => {\n    console.log(`Substrate Client connected.`);\n  });\n  return trnApi;\n}\n\nexport enum Network {\n  Root = 7668,\n  Porcini = 7672,\n}\n\nexport const formatTrnNumber = (val: number): string => val.toString().replace(/,/g, '');\nexport const formatTrnNumberString = (val: string): string => val.toString().replace(/,/g, '');\n\nexport const NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexport const convertBigIntToDecimal = (num: bigint, decimals: number): number => {\n  return parseFloat(formatUnits(num.toString(), decimals));\n};\n\ntype FeeValidationResult = { success: boolean; error?: string };\n\nexport async function validateAndAddFeeProxy(\n  batcher: BatchBuilder | AssetBuilder | CustomExtrinsicBuilder,\n  trnApi: ApiPromise,\n  address: string\n): Promise<FeeValidationResult> {\n  if (!trnApi || !batcher) {\n    return { success: false, error: 'TRN API or batcher is not initialized' };\n  }\n\n  try {\n    // Step 1: Fetch XRP balance of the address\n    const result = (\n      await trnApi.query.assets.account(2, address)\n    ).toPrimitive() as unknown as AccountAssetDetails | null;\n    if (!result) {\n      throw new Error(`No balance found for ${address} on TRN`);\n    }\n    const xrpBalance = BigInt(result.balance);\n\n    // Step 2: Fetch gas fees for the current batch\n    const initialGasFees = await batcher.getGasFees();\n\n    // Step 3: Check if user has enough balance to pay for fees\n    if (xrpBalance >= BigInt(initialGasFees.gasFee)) {\n      return { success: true }; // User has enough funds, proceed\n    }\n\n    // Step 4: Add a fee proxy with asset ID 1 (ROOT) and retry\n    await batcher.addFeeProxy({\n      assetId: 1,\n      slippage: 5,\n    });\n\n    // Step 5: Fetch gas fees again after fee proxy is added\n    const updatedGasFees = await batcher.getGasFees();\n\n    // Step 6: Check ROOT balance with updated gas fees\n    const accountInfo = (await trnApi.query.system.account(address)) as unknown as FrameSystemAccountInfo | null;\n    if (!accountInfo) {\n      return { success: false, error: 'Invalid account' };\n    }\n    const freeBalance = BigInt(accountInfo?.data?.free || 0n);\n\n    if (freeBalance < BigInt(updatedGasFees.gasFee)) {\n      return { success: false, error: 'Insufficient funds to cover gas fees, in both XRP & ROOT' };\n    }\n\n    return { success: true }; // Fee proxy successfully applied\n  } catch (error) {\n    console.error('Error validating gas fees:', error);\n    return { success: false, error: 'Failed to validate gas fees' };\n  }\n}\n","import { type Plugin } from '@elizaos/core';\nimport { getBalanceAction } from './actions/get-balance';\n\n// import getTransaction from './actions/getTransaction';\n// import sendTransaction from './actions/sendTransaction';\n\nexport const trnPlugin: Plugin = {\n  name: '@elizaos-plugins/plugin-trn',\n  description: 'Plugin for interacting with the TRN Chain',\n  config: [],\n  actions: [getBalanceAction],\n  providers: [],\n  evaluators: [],\n  services: [],\n  clients: [],\n  adapters: [],\n};\n\nexport { trnPlugin as default };\n"],"mappings":"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","names":[]}